# Power up C++ with the Standard Template Library: Part 1
# https://www.topcoder.com/community/data-science/data-science-tutorials/power-up-c-with-the-standard-template-library-part-1/
# 2016.09.12.

Power up C++ with the Standard Template Library: Part 1

TopCoder 문제들을 풀기 위해 주 프로그래밍 언어로 C++을 사용했을 것이다. 이것은 간단하게나마 이미 STL을 사용해본 것이다. 
많은 사람들이 더 정확하고 빠르게 동작하도록 코드를 작성한다는 것을 알 것이다.

목적에 상관없이 이 문서는 도움이 줄 수 있다. 많은 시간을 아낄 수 있는 STL에 대해서 검토할 것이다.

STL에 대해 알아보기 위해서는 컨테이너(container)에 대해 먼저 알아봐야한다.

Containers
많은 데이터를 담기 위해서 컨테이너(container)가 필요하다.
C++이 아닌 C에서는 기본적으로 제공되는 컨테이너(container)는 배열(array)뿐이다.

runtime에 배열의 크기를 결정하는 것처럼 제한적인 배열이지만 이것은 문제가 되지않는다.
근본적인 문제는 많은 문제들이 더 좋은 기능이 있는 컨테이너(container)를 필요로 하는 것이다.

예를 들어, 다음의 기능이 필요할 때가 있다.
- Add some string to a container
- Remove a string from a container
- Determine whether a string is present in the container
- Return a number of distinct elements in a container
- Iterate through a container and get a list of added strings in some order

물론 위와 같은 기능을 구현할 수 있다. 그러나 이러한 구현은 매우 비효율적이다.
더 빠른 방법으로 문제를 풀기 위해 tree나 hash구조를 만들 수 있다. 하지만 특정한 elements에 종속적이지 않은가?
다른 elements를 저장하기 위해서는 다시 구현해야하지 않은가?

그러한 컨테이너(container)의 인터페잇를 개발하여 어떠한 데이터 타입에도 사용할 수 있게 되었고 이것을 STL 컨테이너라고 한다.

Before we begin
STL을 사용하기 위해 #include을 사용하여 적정한 헤더들을 포함해야한다. 대부분의 컨테이너들은 그 이름과 헤더의 이름과 동일하다.
예를 들어 스택(stack)을 사용하고 싶다면 다음과 같이 헤더를 포함하면 된다.
  #include <stack>
컨테이너들은 특정한 namespace에 정의되어 있기 때문에 다음과 같이 추가적으로 코드를 추가한다.
  using namespace std;
컨테이너에서 기억해야할 중요한 특징은 템플릿이다. '<'와 '>'을 사용하여 사용할 데이터 타입을 정해주어야 한다.
다음은 int형 데이터 타입에 대한 벡터를 생성한 코드이다.
  vector<int> N;
추가적은 nested constructionm을 만들 때, brackets('<', '>')에 대해 생각해보아야한다.
  vector<vector<int>> vectors; 
위의 코드에서 >>부분이 operator인 >>과 혼동될 수 있다. 따라서 사용할 때 공백을 넣어주면 된다.

Vector
가장 간단한 STL컨테이너는 벡터(vector)이다. 벡터는 배열에 추가적인 함수를 확장한 것으로 생각할 수 있다.
또한 벡터는 C코드와 호환성이 되기 때문에 배열의 특징을 그대로 사용할 수 있다.

추가적으로 first()와 size()는 unsigned이다. 이는 문제를 발생시킬 수 있다. 따라서 보통 매크로를 정의해 signed int형으로 반환하도록 한다.
그리고 size()와 0을 비교하는 것은 피해야한다. 대신에 empty()함수를 사용하는 것이 좋다.
모든 컨테이너들의 size()함수가 O(1)가 아니다. 
또 자주 사용하는 함수는 push_back()이다. 이 함수는 element를 벡터의 마지막부분에 추가시키고 크기를 1증가시킨다. 
매번 element를 추가할때마다 메모리 할당에 대해서 걱정할 필요가 없다. 벡터는 element가 추가될 때마다 메모리할당을 하지 않는다.


Pairs
pair는 STL에서 널리 사용된다. 가장 간단한 형태는 다음과 같다.
  template<typename T1, typename T2> struct pair {
    T1 first;
    T2 second;
  };
일반적으로 pair<int, int>는 int형 변수의 pair이다. 더 복잡한 pair는 다음과 같다.
  pair<string, pair<int, int> > P;

pairs의 가장 큰 장점은 compare의 기능이 있기 때문이다. pairs는 first와 second element를 비교할 수 있다.
pairs의 배열은 STL 내부 함수를 통해 쉽게 정렬될 수 있다.

예를 들어, 다각형을 형성하는 int형 포인터 배열을 정렬하고 싶다면 vector<pair<double, pair<int, int> >을 사용하면된다.
각 element의 내용은 {polar angle, {x, y}}라고 생각하면된다. STL의 정렬함수를 이용하면 원하는 순서대로 포인트들을 정렬할 수 있다.


Iterators
iterators는 무엇인가? STL iterators는 컨테이너의 데이터들을 접근할 수 있는 가장 일반적인 방법이다. 
크기가 N인 배열 A를 reverse하는 간단한 문제를 생각해보자. 
C코드의 방법을 보면 처음과 마지막을 바꿈으로 시작하여 한 element씩 바꾸면 된다.
  void reverse_array_simple(int *A, int N) {
    int first = 0; 
    int last = N - 1;
    while(first < last) {
      swap(A[first], A[last]);
      first++;
      last--;
    }
  }
이 코드를 포인터를 써서 다시 구현한다면 다음과 같다.
  void reverse_array(int *A, int N) {
    int *first = A;
    int *last = A + N - 1;
    while(first < last) {
      swap(first, last);
      first++;
      last--;
    }
  }

이 코드의 반복문을 보게 되면 총 4개의 연산을 하게 된다.
- compare (first < last)
- get value (*first, *last)
- increment (first++)
- decrement (last--)

다음은 double-linked list 또는 
